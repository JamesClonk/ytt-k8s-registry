#@ load("@ytt:assert", "assert")
#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
#@ load("_ytt.lib.yml", "labels")

#@ if len(data.values.registry.htpasswd) == 0:
#@  assert.fail("htpasswd is missing!")
#@ end
#@ if len(data.values.registry.shared_secret) == 0:
#@  assert.fail("shared_secret is missing!")
#@ end

#@ if data.values.registry.storage.driver == "s3":
#@   if len(data.values.registry.storage.s3.access_key_id) == 0:
#@    assert.fail("storage.s3.access_key_id is missing!")
#@   end
#@   if len(data.values.registry.storage.s3.secret_access_key) == 0:
#@    assert.fail("storage.s3.secret_access_key is missing!")
#@   end
#@   if len(data.values.registry.storage.s3.endpoint) == 0:
#@    assert.fail("storage.s3.endpoint is missing!")
#@   end
#@   if len(data.values.registry.storage.s3.region) == 0:
#@    assert.fail("storage.s3.region is missing!")
#@   end
#@   if len(data.values.registry.storage.s3.bucket) == 0:
#@    assert.fail("storage.s3.bucket is missing!")
#@   end
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ data.values.registry.app + "-htpasswd"
  namespace: #@ data.values.registry.namespace
  labels: #@ labels()
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
stringData:
  htpasswd: #@ data.values.registry.htpasswd
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ data.values.registry.app + "-config"
  namespace: #@ data.values.registry.namespace
  labels: #@ labels()
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
#@yaml/text-templated-strings
stringData:
  config.yml: |
    version: 0.1

    log:
      level: info
      formatter: text
      fields:
        service: "(@= data.values.registry.app @)"

    storage:
      cache:
        blobdescriptor: inmemory

      (@ if data.values.registry.storage.driver == "filesystem": @)
      filesystem:
        rootdirectory: /var/lib/registry
      (@ end @)

      (@ if data.values.registry.storage.driver == "s3": @)
      s3:
        accesskey: "(@= data.values.registry.storage.s3.access_key_id @)"
        secretkey: "(@= data.values.registry.storage.s3.secret_access_key @)"
        region: "(@= data.values.registry.storage.s3.region @)"
        regionendpoint: "(@= data.values.registry.storage.s3.endpoint @)"
        bucket: "(@= data.values.registry.storage.s3.bucket @)"
        encrypt: false
        secure: true
        chunksize: 10485760
        v4auth: false
        storageclass: none
      (@ end @)

      redirect:
        disable: true

    http:
      addr: :5000
      secret: "(@= data.values.registry.shared_secret @)"
      headers:
        X-Content-Type-Options: [nosniff]
      debug:
        addr: :9090
        prometheus:
          enabled: true
          path: /metrics

    auth:
      htpasswd:
        realm: "(@= data.values.registry.app @)-realm"
        path: /auth/htpasswd

    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
