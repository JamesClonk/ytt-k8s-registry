#@ load("@ytt:data", "data")
#@ load("_ytt.lib.yml", "labels")

#@ if data.values.registry.enable_pod_security_policy:
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: #@ data.values.registry.app + "-role"
  namespace: #@ data.values.registry.namespace
  labels: #@ labels()
rules:
- apiGroups:
  - policy
  resources:
  - podsecuritypolicies
  verbs:
  - use
  resourceNames:
  - #@ data.values.registry.app + "-psp"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: #@ data.values.registry.app + "-role-binding"
  namespace: #@ data.values.registry.namespace
  labels: #@ labels()
roleRef:
  kind: Role
  name: #@ data.values.registry.app + "-role"
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: #@ data.values.registry.app + "-service-account"
  namespace: #@ data.values.registry.namespace
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: #@ data.values.registry.app + "-psp"
  namespace: #@ data.values.registry.namespace
  labels: #@ labels()
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: runtime/default
    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
  - ALL
  volumes:
  - persistentVolumeClaim
  - projected
  - downwardAPI
  - configMap
  - secret
  readOnlyRootFilesystem: false
  hostNetwork: false
  hostIPC: false
  hostPID: false
  seLinux:
    rule: RunAsAny
  runAsUser:
    rule: MustRunAs
    ranges:
    - min: 1007
      max: 65535
  fsGroup:
    rule: MustRunAs
    ranges:
    - min: 1007
      max: 65535
  supplementalGroups:
    rule: MustRunAs
    ranges:
    - min: 1007
      max: 65535
#@ end
